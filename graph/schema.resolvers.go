package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"fmt"
	"servim_api/graph/model"
)

// CreateCompany is the resolver for the createCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input model.NewCompany) (*model.Company, error) {
	return &model.Company{ID: "1", Title: "qweqwe"}, nil
}

// Company is the resolver for the company field.
func (r *queryResolver) Company(ctx context.Context, id string) (*model.Company, error) {
	return &model.Company{ID: "1", Title: "qweqwe"}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Branch is the resolver for the branch field.
func (r *queryResolver) Branch(ctx context.Context, id string) (*model.Branch, error) {
	panic(fmt.Errorf("not implemented: Branch - branch"))
}

// Branches is the resolver for the branches field.
func (r *queryResolver) Branches(ctx context.Context, companyID string) ([]*model.Branch, error) {
	panic(fmt.Errorf("not implemented: Branches - branches"))
}

// Specialist is the resolver for the specialist field.
func (r *queryResolver) Specialist(ctx context.Context, id string) (*model.Specialist, error) {
	panic(fmt.Errorf("not implemented: Specialist - specialist"))
}

// Specialists is the resolver for the specialists field.
func (r *queryResolver) Specialists(ctx context.Context) ([]*model.Specialist, error) {
	panic(fmt.Errorf("not implemented: Specialists - specialists"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
